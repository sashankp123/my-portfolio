# -*- coding: utf-8 -*-
"""sashank_punyamurthy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gvltdDyS32M_r7UGyVwirMj_xuAQV-6Q
"""

from googleapiclient.discovery import build

# Your API key goes here
api_key = 'AIzaSyDH1lv25b18zDz7oVgsWyT0XXq0LRQbXJg'

# Building the service object
youtube = build('youtube', 'v3', developerKey=api_key)

# Step 2: Print out the name of the city you have been assigned to
assigned_city = "Port St. Lucie"
print(assigned_city)

# Step 3: Use the Youtube API to search for the videos related to your assigned city
search_response = youtube.search().list(
    q=assigned_city,
    part='id,snippet',
    maxResults=100,
    type='video'
).execute()

# Step 4: Get the video details
video_ids = []
for item in search_response.get('items', []):
    if item['id']['kind'] == 'youtube#video':
        video_ids.append(item['id']['videoId'])

# Get video details
videos_response = youtube.videos().list(
    id=','.join(video_ids),
    part='id,snippet,statistics'
).execute()

# Step 5: Print out the details for each video
# Step 5: Print out the details for each video, with error handling for missing 'likeCount'
for video in videos_response.get('items', []):
    title = video['snippet']['title']
    video_id = video['id']
    view_count = video['statistics'].get('viewCount', 'Not available')

    # Some videos may not have a 'likeCount' if likes are disabled
    like_count = video['statistics'].get('likeCount', 'Not available')

    # Print formatted results
    print(f"Title: {title}\nVideo Id: {video_id}\nNumber of Views: {view_count}\nNumber of Likes: {like_count}")
    print("★" * 30)

import matplotlib.pyplot as plt

# Lists to store video titles, view counts, and like counts
titles = []
view_counts = []
like_counts = []

# Extract data from the API response
for video in videos_response.get('items', []):
    title = video['snippet']['title']
    view_count = int(video['statistics'].get('viewCount', 0))  # Convert to int, default to 0 if viewCount is missing
    like_count = int(video['statistics'].get('likeCount', 0))  # Convert to int, default to 0 if likeCount is missing

    # Append data to lists
    titles.append(title)
    view_counts.append(view_count)
    like_counts.append(like_count)

# Plotting the data
plt.figure(figsize=(10, 6))
plt.bar(range(len(titles)), view_counts, color='blue', label='Views')
plt.bar(range(len(titles)), like_counts, color='green', label='Likes')
plt.xlabel('Videos')
plt.ylabel('Count')
plt.title('Number of Views and Likes for Videos Related to ' + assigned_city)
plt.xticks(range(len(titles)), titles, rotation=90)  # Rotate x-axis labels for better readability
plt.legend()
plt.tight_layout()  # Adjust layout to prevent clipping of labels
plt.show()

import matplotlib.pyplot as plt

# Collect views and likes, excluding videos with missing 'likeCount'
views = []
likes = []
for video in videos_response.get('items', []):
    if 'likeCount' in video['statistics']:
        views.append(int(video['statistics']['viewCount']))
        likes.append(int(video['statistics']['likeCount']))

# Now you have lists of views and likes with corresponding indices
plt.figure(figsize=(10, 5))
plt.scatter(views, likes)
plt.title('Relationship between Views and Likes')
plt.xlabel('Number of Views')
plt.ylabel('Number of Likes')
plt.grid(True)
plt.show()

print("I chose a bar graph to visualize the number of views and likes for each video related to the assigned city because it offers a clear and compact comparison between the two metrics. With each video represented by a pair of bars—one for views and one for likes—the graph allows for straightforward comparison across multiple videos. The use of different colors for views and likes enhances visual distinction, while displaying video titles on the x-axis ensures easy identification of each data point. By presenting the data in this format, viewers can quickly grasp the relative popularity of videos in terms of both views and likes, aiding in the understanding of viewer engagement with content related to the assigned city.")